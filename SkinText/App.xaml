<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SkinText"
             xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:Themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
             mc:Ignorable="d"
             x:Class="SkinText.App"
             StartupUri="MainWindow.xaml" Startup="Application_Startup">
    <Application.Resources>

        <!--Toolbar Area-->

        <!--Font Family Area-->

        <xctk:ColorModeToTabItemSelectedConverter x:Key="ColorModeToTabItemSelectedConverter"/>

        <SolidColorBrush x:Key="BorderColorBrush" Color="#FF424242" />
        <SolidColorBrush x:Key="MainWindowBackgroundColorBrush" Color="#55FFFFFF" />
        <SolidColorBrush x:Key="RTBBackgroundColorBrush" Color="#7DFFFFFF" />

        <SolidColorBrush x:Key="BackgroundColorBrush" Color="#CA1C1C1C" />
        <SolidColorBrush x:Key="ButtonBackgroundColorBrush" Color="#FF262626" />
        <SolidColorBrush x:Key="ButtonFrontColorBrush" Color="#FFE6E6E6" />
        <SolidColorBrush x:Key="ButtonBackgroundMouseOverColorBrush" Color="#FF00B5FF" />
        <SolidColorBrush x:Key="ButtonBorderMouseOverColorBrush" Color="#FFE6E6E6" />
        <SolidColorBrush x:Key="ButtonBackgroundCheckedColorBrush" Color="#CD000000" />
        <SolidColorBrush x:Key="ButtonBorderCheckedColorBrush" Color="#FF808080" />
        <SolidColorBrush x:Key="TextColorBrush" Color="#FF808080" />

        <SolidColorBrush x:Key="FontPickBackgroundColorBrush" Color="#23696969" />
        <SolidColorBrush x:Key="FontPickTextColorBrush" Color="#FFE6E6E6" />
        <SolidColorBrush x:Key="FontPickMouseOverBackgroundColorBrush" Color="#FF000000" />
        <SolidColorBrush x:Key="FontPickMouseOverBorderColorBrush" Color="#FF00B5FF" />
        <SolidColorBrush x:Key="FontPickSelectedBackgroundColorBrush" Color="#8C000000" />
        <SolidColorBrush x:Key="FontPickSelectedBorderColorBrush" Color="#FFDB6929" />

        <SolidColorBrush x:Key="MenuBackgroundColorBrush" Color="#C9000000" />
        <SolidColorBrush x:Key="MenuItem1BorderColorBrush" Color="#00FFFFFF" />
        <SolidColorBrush x:Key="MenuItem2HighlightTextColorBrush" Color="#FF00B5FF" />
        <SolidColorBrush x:Key="MenuItem2HighlightBorderColorBrush" Color="#FFDB6929" />
        <SolidColorBrush x:Key="MenuItem2DisabledColorBrush" Color="#73696969" />

        <BitmapImage x:Key="ImageSource1CC" CreateOptions="IgnoreImageCache" CacheOption="OnLoad" UriSource="Resources\CC88x31.png" />
        <BitmapImage x:Key="ImageSource1X" CreateOptions="IgnoreImageCache" CacheOption="OnLoad" UriSource="Resources\X.png" />
        <BitmapImage x:Key="ImageSource1CharMap" CreateOptions="IgnoreImageCache" CacheOption="OnLoad" UriSource="Resources\CharMap.png" />
        <BitmapImage x:Key="ImageSource1icon" CreateOptions="IgnoreImageCache" CacheOption="OnLoad" UriSource="Resources\icon_01.ico" />

        <Style x:Key="ToolTipStyle" TargetType="{x:Type ToolTip}">
            <Setter Property="Background"              Value="Transparent" />
            <Setter Property="BorderBrush"             Value="Transparent" />
            <Setter Property="BorderThickness"         Value="0" />
            <Setter Property="VerticalOffset"          Value="-10" />
        </Style>
        <Style x:Key="ToolTipBorderStyle" TargetType="{x:Type Border}">
            <Setter Property="Background"              Value="{DynamicResource BackgroundColorBrush}" />
            <Setter Property="BorderBrush"             Value="{DynamicResource BorderColorBrush}" />
            <Setter Property="BorderThickness"         Value="2" />
            <Setter Property="CornerRadius"            Value="3" />
            <Setter Property="Padding"                 Value="5" />
        </Style>
        <Style x:Key="ToolTipTextStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="FontSize"                Value="14.667" />
            <Setter Property="FontFamily"              Value="Tahoma" />
            <Setter Property="Foreground"              Value="{DynamicResource TextColorBrush}" />
            <Setter Property="FontWeight"              Value="Bold" />
            <Setter Property="HorizontalAlignment"     Value="Center" />
            <Setter Property="VerticalAlignment"       Value="Center" />
        </Style>
        <Style x:Key="LabelStyle" TargetType="{x:Type Label}">
            <Setter Property="HorizontalAlignment"        Value="Stretch" />
            <Setter Property="VerticalAlignment"          Value="Stretch" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment"   Value="Center" />
            <Setter Property="Margin"                     Value="0" />
        </Style>
        <Style x:Key="ButtonsStyle" TargetType="{x:Type Button}">
            <Setter Property="FontSize"                Value="16" />
            <Setter Property="FontFamily"              Value="Arial Black" />
            <Setter Property="FontWeight"              Value="Bold" />
            <Setter Property="Background"              Value="{DynamicResource ButtonBackgroundColorBrush}" />
            <Setter Property="Foreground"              Value="{DynamicResource ButtonFrontColorBrush}" />
            <Setter Property="BorderBrush"             Value="{x:Null}" />
            <Setter Property="HorizontalAlignment"     Value="Center" />
            <Setter Property="VerticalAlignment"       Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver"        Value="True">
                    <Setter Property="Background"      Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                    <Setter Property="BorderBrush"      Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                </Trigger>
                <Trigger Property="IsPressed"       Value="True">
                    <Setter Property="Background"   Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                </Trigger>
                <Trigger Property="IsEnabled"       Value="false">
                    <Setter Property="TextElement.Foreground"  Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                    <Setter Property="Opacity"  Value="0.6" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ToggleButtonsStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="FontSize"                Value="16" />
            <Setter Property="FontFamily"              Value="Arial Black" />
            <Setter Property="FontWeight"              Value="Bold" />
            <Setter Property="Background"              Value="{DynamicResource ButtonBackgroundColorBrush}" />
            <Setter Property="Foreground"              Value="{DynamicResource ButtonFrontColorBrush}" />
            <Setter Property="BorderBrush"             Value="{x:Null}" />
            <Setter Property="HorizontalAlignment"     Value="Center" />
            <Setter Property="VerticalAlignment"       Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver"        Value="True">
                    <Setter Property="Background"      Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                    <Setter Property="BorderBrush"      Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                </Trigger>
                <Trigger Property="IsChecked"          Value="True">
                    <Setter Property="Background"      Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                    <Setter Property="BorderBrush"     Value="{DynamicResource ButtonBorderCheckedColorBrush}" />
                    <Setter Property="BorderThickness" Value="1" />
                </Trigger>
                <Trigger Property="IsPressed"       Value="True">
                    <Setter Property="Background"   Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                </Trigger>
                <Trigger Property="IsEnabled"       Value="false">
                    <Setter Property="TextElement.Foreground"  Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                    <Setter Property="Opacity"  Value="0.6" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RadioButtonsStyle" TargetType="{x:Type RadioButton}">
            <Setter Property="FontSize"                Value="16" />
            <Setter Property="FontFamily"              Value="Arial Black" />
            <Setter Property="FontWeight"              Value="Bold" />
            <Setter Property="Background"              Value="{DynamicResource ButtonBackgroundColorBrush}" />
            <Setter Property="Foreground"              Value="{DynamicResource ButtonFrontColorBrush}" />
            <Setter Property="BorderBrush"             Value="{x:Null}" />
            <Setter Property="HorizontalAlignment"     Value="Center" />
            <Setter Property="VerticalAlignment"       Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver"        Value="True">
                    <Setter Property="Background"      Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                    <Setter Property="BorderBrush"      Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                </Trigger>
                <Trigger Property="IsChecked"          Value="True">
                    <Setter Property="Background"      Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                    <Setter Property="BorderBrush"     Value="{DynamicResource ButtonBorderCheckedColorBrush}" />
                    <Setter Property="BorderThickness" Value="1" />
                </Trigger>
                <Trigger Property="IsPressed"       Value="True">
                    <Setter Property="Background"   Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                </Trigger>
                <Trigger Property="IsEnabled"       Value="false">
                    <Setter Property="TextElement.Foreground"  Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                    <Setter Property="Opacity"  Value="0.6" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
            <Style.Resources>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border x:Name="Border" Padding="1" SnapsToDevicePixels="true" BorderThickness="1">
                                    <ContentPresenter />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource FontPickMouseOverBackgroundColorBrush}"/>
                                        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource FontPickMouseOverBorderColorBrush}"/>
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="true">
                                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource FontPickSelectedBackgroundColorBrush}"/>
                                        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource FontPickSelectedBorderColorBrush}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.Resources>
            <Setter Property="Margin"                  Value="5" />
            <Setter Property="Foreground"              Value="{DynamicResource FontPickTextColorBrush}" />
            <Setter Property="Background"              Value="{DynamicResource FontPickBackgroundColorBrush}" />
            <Setter Property="BorderBrush"             Value="{x:Null}" />
        </Style>

        <LinearGradientBrush x:Key="DarkBrush" StartPoint="0.5,0" EndPoint="0.5,1">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#90939393" Offset="0.0" />
                    <GradientStop Color="#90717171" Offset="0.05" />
                    <GradientStop Color="#90606060" Offset="1.0" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="Clicked" StartPoint="0.5,0" EndPoint="0.5,1">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#60363636" Offset="0.0" />
                    <GradientStop Color="#60393939" Offset="1.0" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Foreground" Value="{DynamicResource TextColorBrush}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Menu}">
                        <Border x:Name="MainMenu" Background="{DynamicResource MenuBackgroundColorBrush}">
                            <DockPanel ClipToBounds="True" HorizontalAlignment="Stretch" IsItemsHost="True" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="MenuItemControlTemplate1" TargetType="{x:Type MenuItem}">
            <Border x:Name="templateRoot"
                BorderBrush="{DynamicResource MenuItem1BorderColorBrush}"
                CornerRadius="3"
                BorderThickness="1"
                Background="{TemplateBinding Background}"
                SnapsToDevicePixels="True">
                <Grid VerticalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Popup x:Name="PART_Popup"  AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" HorizontalOffset="-2">
                        <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource BorderColorBrush}" BorderThickness="1" Background="{DynamicResource MenuBackgroundColorBrush}" Padding="2">
                            <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}" />
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" />
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource DarkBrush}" />
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#2C2C2C" />
                    <Setter Property="BorderThickness" TargetName="templateRoot" Value="1"/>
                </Trigger>
                <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}" />
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}" />
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource Clicked}" />
                    <Setter Property="BorderBrush" Value="#2C2C2C"/>
                    <Setter Property="BorderThickness" Value="1"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="MenuItemControlTemplate2" TargetType="{x:Type MenuItem}">
            <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <Grid Margin="-1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto" />
                        <ColumnDefinition Width="13" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
                        <ColumnDefinition Width="20" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
                    <!-- Border x:Name="GlyphPanel" BorderBrush="#FF26A0DA" BorderThickness="1" Background="#3D26A0DA" ClipToBounds="False" HorizontalAlignment="Center" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22"-->
                    <Border x:Name="GlyphPanel" BorderBrush="{DynamicResource TextColorBrush}" BorderThickness="1" Background="{DynamicResource ButtonBackgroundColorBrush}" ClipToBounds="False" HorizontalAlignment="Center" Height="22" Margin="-1,0,0,0" Visibility="Hidden" VerticalAlignment="Center" Width="22">
                        <Path x:Name="Glyph" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="{DynamicResource TextColorBrush}" FlowDirection="LeftToRight" Height="11" Width="10" />
                    </Border>
                    <ContentPresenter x:Name="menuHeaderContainer" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    <TextBlock x:Name="menuGestureText" Grid.Column="4" Margin="{TemplateBinding Padding}" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" />
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource DarkBrush}" />
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem2HighlightBorderColorBrush}" />
                    <Setter Property="TextBlock.Foreground" TargetName="menuHeaderContainer" Value="{DynamicResource MenuItem2HighlightTextColorBrush}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                    <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                </Trigger>
                <MultiTrigger>
                    <!--Never triggers?-->
                    <MultiTrigger.Conditions>
                        <Condition Property="IsHighlighted" Value="True" />
                        <Condition Property="IsEnabled" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" TargetName="templateRoot" Value="#0A000000" />
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#21000000" />
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--Toolbar Area-->
        <Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}">
            <Setter Property="Background" Value="{DynamicResource MenuBackgroundColorBrush}"/>
        </Style>

        <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="Border" CornerRadius="0,3,3,0" SnapsToDevicePixels="true" Background="{DynamicResource MenuBackgroundColorBrush}">
                            <Grid>
                                <Path x:Name="Arrow" Fill="{DynamicResource ButtonFrontColorBrush}" VerticalAlignment="Bottom" Margin="2,3" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" />
                                <ContentPresenter />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"     Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed"       Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsChecked"       Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled"       Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="Border" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Opacity" TargetName="Border" Value="0.6" />
                                <Setter Property="Visibility" Value="Collapsed" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Cursor" Value="SizeAll" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border Background="Transparent" SnapsToDevicePixels="True">
                            <Rectangle Margin="0,2">
                                <Rectangle.Fill>
                                    <DrawingBrush Viewport="0,0,4,4" ViewportUnits="Absolute" Viewbox="0,0,8,8" ViewboxUnits="Absolute" TileMode="Tile">
                                        <DrawingBrush.Drawing>
                                            <DrawingGroup>
                                                <GeometryDrawing Brush="{DynamicResource ButtonBackgroundMouseOverColorBrush}" Geometry="M 4 4 L 4 8 L 8 8 L 8 4 z" />
                                            </DrawingGroup>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
            <Setter Property="FontSize"                Value="14.667" />
            <Setter Property="FontFamily"              Value="Tahoma" />
            <Setter Property="FontWeight"              Value="Bold" />
            <Setter Property="Background"              Value="{DynamicResource ButtonBackgroundColorBrush}" />
            <Setter Property="Foreground"              Value="{DynamicResource TextColorBrush}" />
            <Setter Property="BorderBrush"             Value="{x:Null}" />
            <Setter Property="HorizontalAlignment"     Value="Center" />
            <Setter Property="VerticalAlignment"       Value="Center" />
            <Setter Property="Margin"                  Value="2,0,0,1" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToolBar}">
                        <Border x:Name="Border" CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <DockPanel>
                                <ToggleButton DockPanel.Dock="Right" IsEnabled="{TemplateBinding HasOverflowItems}"
                                              Style="{DynamicResource ToolBarOverflowButtonStyle}" ClickMode="Press"
                                              IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <Popup x:Name="OverflowPopup" AllowsTransparency="true"
                                            Placement="Bottom" StaysOpen="false" Focusable="false"
                                            PopupAnimation="Slide"
                                            IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource BorderColorBrush}" BorderThickness="1" Background="{DynamicResource ButtonBackgroundColorBrush}" Padding="2">
                                            <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="0"
                                                                    WrapWidth="200" Focusable="true"
                                                                    FocusVisualStyle="{x:Null}"
                                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                    Background="{TemplateBinding Background}" />
                                        </Border>
                                    </Popup>
                                </ToggleButton>
                                <Thumb x:Name="ToolBarThumb" Style="{DynamicResource ToolBarThumbStyle}" Width="5" />
                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" />
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsOverflowOpen" Value="true">
                                <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
                            </Trigger>
                            <Trigger Property="ToolBarTray.IsLocked" Value="true">
                                <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Static ToolBar.ButtonStyleKey}"  TargetType="{x:Type Button}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Border" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                            <ContentPresenter Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"     Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                                <Setter Property="BorderBrush"  TargetName="Border" Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed"       Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled"       Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="Border" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Opacity" TargetName="Border" Value="0.6" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="Border" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                            <ContentPresenter Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"     Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                                <Setter Property="BorderBrush"  TargetName="Border" Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed"       Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled"       Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="Border" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Opacity" TargetName="Border" Value="0.6" />
                            </Trigger>
                            <Trigger Property="IsChecked"          Value="True">
                                <Setter Property="Background"      TargetName="Border" Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                                <Setter Property="BorderBrush"     TargetName="Border" Value="{DynamicResource ButtonBorderCheckedColorBrush}" />
                                <Setter Property="BorderThickness" TargetName="Border" Value="1" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border x:Name="Border" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                            <ContentPresenter Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"     Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                                <Setter Property="BorderBrush"  TargetName="Border" Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed"       Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled"       Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="Border" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Opacity" TargetName="Border" Value="0.6" />
                            </Trigger>
                            <Trigger Property="IsChecked"          Value="True">
                                <Setter Property="Background"      TargetName="Border" Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                                <Setter Property="BorderBrush"     TargetName="Border" Value="{DynamicResource ButtonBorderCheckedColorBrush}" />
                                <Setter Property="BorderThickness" TargetName="Border" Value="1" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Border x:Name="Border" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                            <ContentPresenter Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"     Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                                <Setter Property="BorderBrush"  TargetName="Border" Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed"       Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled"       Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="Border" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Opacity" TargetName="Border" Value="0.6" />
                            </Trigger>
                            <Trigger Property="IsChecked"          Value="True">
                                <Setter Property="Background"      TargetName="Border" Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                                <Setter Property="BorderBrush"     TargetName="Border" Value="{DynamicResource ButtonBorderCheckedColorBrush}" />
                                <Setter Property="BorderThickness" TargetName="Border" Value="1" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="AllowDrop" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="Border" Padding="2" BorderThickness="1" Background="{DynamicResource MenuBackgroundColorBrush}" BorderBrush="{DynamicResource MenuBackgroundColorBrush}">
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"     Value="True">
                                <Setter Property="Background"   TargetName="Border"   Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled"       Value="false">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Opacity" TargetName="Border" Value="0.6" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--Color Picker Area-->

        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
        <xctk:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter" />

        <DrawingBrush  x:Key="CheckerBrush" Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">
            <DrawingBrush.Drawing>
                <DrawingGroup>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Geometry>
                            <RectangleGeometry Rect="0,0 100,100" />
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                    <GeometryDrawing Brush="LightGray">
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <RectangleGeometry Rect="0,0 50,50" />
                                <RectangleGeometry Rect="50,50 50,50" />
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingGroup>
            </DrawingBrush.Drawing>
        </DrawingBrush>

        <Style x:Key="ColorItemContainerStyle" TargetType="{x:Type ListBoxItem}">
            <Setter Property="ToolTip" Value="{Binding Name}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Grid x:Name="mainGrid"
                     ToolTip="{Binding Name}">
                            <Grid.Resources>
                                <Style TargetType="{x:Type ToolTip}">
                                    <Style.Triggers>
                                        <Trigger Property="Content"
                                    Value="">
                                            <Setter Property="Visibility"
                                      Value="Collapsed" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Resources>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Border BorderThickness="1" Background="Transparent" BorderBrush="Transparent" x:Name="_outerBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Border Background="Transparent" BorderThickness="1" BorderBrush="Transparent" x:Name="_innerBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="_outerBorder" Property="BorderBrush" Value="#FFFF0000" />
                                <Setter TargetName="_innerBorder" Property="BorderBrush" Value="#FFFFFF00" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="_outerBorder" Property="BorderBrush" Value="#FFFF0000" />
                                <Setter TargetName="_innerBorder" Property="BorderBrush" Value="#FFFFFF00" />
                            </Trigger>
                            <DataTrigger Binding="{Binding DisplayColorAndName, RelativeSource={RelativeSource AncestorType={x:Type xctk:ColorPicker}}}"
                               Value="False">
                                <Setter Property="ToolTip"
                             Value=""
                             TargetName="mainGrid" />
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DataTemplate x:Key="ColorItemTemplate">
            <Grid>
                <Border Background="{StaticResource CheckerBrush}" BorderBrush="Black" BorderThickness="1" Margin="2,2,2,2">
                    <Rectangle Width="14" Height="14">
                        <Rectangle.Style>
                            <Style TargetType="{x:Type Rectangle}">
                                <Setter Property="Fill" Value="{Binding Color, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                            </Style>
                        </Rectangle.Style>
                    </Rectangle>
                </Border>
            </Grid>
        </DataTemplate>

        <Style x:Key="ColorPickerToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid SnapsToDevicePixels="True">

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                    <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                </Border>

                                <xctk:ButtonChrome x:Name="ToggleButtonChrome" Background="{DynamicResource ButtonBackgroundColorBrush}" BorderBrush="{x:Null}"
                                          Grid.Column="1"
                                          Visibility="{Binding ShowDropDownButton, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type xctk:ColorPicker}, Mode=FindAncestor}}">
                                    <!--
                                          RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:ColorPicker}}"
                                          RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:ColorPicker}}"
											         RenderMouseOver="{TemplateBinding IsMouseOver}"
											         RenderPressed="{TemplateBinding IsPressed}"
                                            -->

                                    <Grid x:Name="arrowGlyph" IsHitTestVisible="False" Grid.Column="1" Margin="5">
                                        <Path x:Name="Arrow"
                                 Width="9"
                                 Height="5"
                                 Data="M0,0 L3,0 4.5,1.5 6,0 9,0 4.5,4.5 z"
                                 Fill="{DynamicResource ButtonFrontColorBrush}"
                                 Margin="0,1,0,0" />
                                    </Grid>
                                </xctk:ButtonChrome>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"        Value="True">
                                <Setter Property="Background"   TargetName="ToggleButtonChrome"  Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                                <Setter Property="BorderBrush"  TargetName="ToggleButtonChrome"    Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed"          Value="True">
                                <Setter Property="Background"  TargetName="ToggleButtonChrome" Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                                <Setter Property="BorderBrush" TargetName="ToggleButtonChrome"     Value="{DynamicResource ButtonBorderCheckedColorBrush}" />
                                <Setter Property="BorderThickness" Value="1" />
                            </Trigger>
                            <Trigger Property="IsEnabled"       Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="ToggleButtonChrome" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Opacity"                TargetName="ToggleButtonChrome" Value="0.6" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ColorDisplayStyle" TargetType="{x:Type ContentControl}">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Border Background="{StaticResource ButtonBackgroundColorBrush}">
                            <Rectangle Fill="{Binding SelectedColor, Converter={StaticResource ColorToSolidColorBrushConverter}, RelativeSource={RelativeSource AncestorType={x:Type xctk:ColorPicker}, Mode=FindAncestor}}" />
                        </Border>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource AncestorType={x:Type xctk:ColorPicker}, Mode=FindAncestor}}"
                      Value="{x:Null}">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ColorListStyle" TargetType="{x:Type ListBox}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <WrapPanel Width="200" />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle" Value="{StaticResource ColorItemContainerStyle}" />
            <Setter Property="ItemTemplate" Value="{StaticResource ColorItemTemplate}" />
            <Setter Property="SelectionMode" Value="Single" />
        </Style>

        <Style x:Key="ColorPickerStyle" TargetType="{x:Type xctk:ColorPicker}">
            <Setter Property="Background" Value="{DynamicResource ButtonBackgroundColorBrush}" />
            <Setter Property="BorderBrush" Value="{x:Null}" />
            <Setter Property="BorderThickness" Value="1,1,0,1" />
            <Setter Property="ButtonStyle" Value="{DynamicResource ColorPickerToggleButtonStyle}" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="MaxDropDownWidth" Value="253" />
            <Setter Property="ShowRecentColors" Value="True" />
            <Setter Property="AvailableColorsSortingMode" Value="HueSaturationBrightness" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xctk:ColorPicker}">
                        <Grid>
                            <ToggleButton x:Name="PART_ColorPickerToggleButton"
                                          IsTabStop="True"
                                          MinHeight="22"
                                          Background="{TemplateBinding Background}"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          BorderThickness="{TemplateBinding BorderThickness}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Padding="{TemplateBinding Padding}"
                                          IsHitTestVisible="{Binding IsOpen, Converter={StaticResource InverseBoolConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                          IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{TemplateBinding ButtonStyle}"
                                          >
                                <Grid Margin="2">
                                    <ContentControl x:Name="ColorOnly" Style="{StaticResource ColorDisplayStyle}" />
                                    <Border x:Name="ColorAndName" Background="White" Visibility="Hidden">
                                        <StackPanel Orientation="Horizontal">
                                            <ContentControl
                                                HorizontalAlignment="Left"
                                                Width="20"
                                                Margin="2,1,4,1"
                                                Style="{StaticResource ColorDisplayStyle}"
                                                BorderThickness="1"
                                                BorderBrush="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"
                                                />
                                            <TextBlock Text="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
                                        </StackPanel>
                                    </Border>
                                </Grid>
                            </ToggleButton>
                            <Popup x:Name="PART_ColorPickerPalettePopup"
                                   AllowsTransparency="True"
                                   Focusable="False"
                                   HorizontalOffset="1"
                                   IsOpen="{Binding IsChecked, ElementName=PART_ColorPickerToggleButton}"
                                   PopupAnimation="Slide"
                                   StaysOpen="False"
                                   ToolTip=""
                                   VerticalOffset="1"
                                   VerticalAlignment="Bottom">
                                <Popup.Resources>
                                    <Style TargetType="{x:Type ToolTip}">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border BorderThickness="1"
                                        Background="{DynamicResource BackgroundColorBrush}"
                                        BorderBrush="{DynamicResource BorderColorBrush}"
                                        Padding="3">
                                    <TabControl x:Name="ColorPickerTabControl" Background="{DynamicResource BackgroundColorBrush}"
                                                SelectedIndex="{Binding ColorMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorModeToTabItemSelectedConverter}}">
                                        <xctk:ColorPickerTabItem x:Name="StandardTabItem" Header="{Binding StandardButtonHeader, RelativeSource={RelativeSource TemplatedParent}}">
                                            <xctk:ColorPickerTabItem.Template>
                                                <ControlTemplate TargetType="{x:Type xctk:ColorPickerTabItem}">
                                                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                                        <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{DynamicResource ButtonBackgroundColorBrush}" Margin="0">
                                                            <Border x:Name="innerBorder" BorderBrush="#FFACACAC" BorderThickness="1,1,1,0" Background="{DynamicResource ButtonBackgroundColorBrush}" Margin="-1" Opacity="0"/>
                                                        </Border>
                                                        <ContentPresenter x:Name="contentPresenter"
                                                                          TextBlock.Foreground="{DynamicResource ButtonFrontColorBrush}"
                                                                          ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Panel.ZIndex" Value="1"/>
                                                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                                                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                                        </MultiDataTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </xctk:ColorPickerTabItem.Template>
                                            <Grid x:Name="_colorPaletteHost" Margin="4">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <!-- Available Colors -->
                                                <Grid Grid.Row="1" Visibility="{TemplateBinding ShowAvailableColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto"/>
                                                            <RowDefinition/>
                                                        </Grid.RowDefinitions>
                                                        <TextBlock Background="{DynamicResource ButtonBackgroundColorBrush}"
                                                                   Foreground="{DynamicResource ButtonFrontColorBrush}"
                                                                   Margin="0,0,0,1" Padding="2"
                                                                   Text="{TemplateBinding AvailableColorsHeader}"/>
                                                        <ListBox x:Name="PART_AvailableColors" Grid.Row="1"
                                                                 ItemsSource="{Binding AvailableColors, RelativeSource={RelativeSource TemplatedParent}}"
                                                                 Style="{StaticResource ColorListStyle}" />
                                                    </Grid>
                                                </Grid>

                                                <!-- Standard Colors-->
                                                <Grid Grid.Row="2" Visibility="{TemplateBinding ShowStandardColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto"/>
                                                            <RowDefinition Height="Auto"/>
                                                        </Grid.RowDefinitions>
                                                        <TextBlock Background="{DynamicResource ButtonBackgroundColorBrush}" Foreground="{DynamicResource ButtonFrontColorBrush}" Margin="0,1" Padding="2" Text="{TemplateBinding StandardColorsHeader}"/>
                                                        <ListBox x:Name="PART_StandardColors" Grid.Row="1"
                                                                ItemsSource="{Binding StandardColors, RelativeSource={RelativeSource TemplatedParent}}"
                                                                Style="{StaticResource ColorListStyle}" />
                                                    </Grid>
                                                </Grid>

                                                <!-- Recent Colors-->
                                                <Grid Margin="0,1" Grid.Row="3" Visibility="{TemplateBinding ShowRecentColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto"/>
                                                            <RowDefinition Height="22"/>
                                                        </Grid.RowDefinitions>
                                                        <TextBlock  Background="{DynamicResource ButtonBackgroundColorBrush}" Foreground="{DynamicResource ButtonFrontColorBrush}" Margin="0,1" Padding="2" Text="{TemplateBinding RecentColorsHeader}"/>
                                                        <ListBox x:Name="PART_RecentColors" Grid.Row="1"
                                                                 ItemsSource="{Binding RecentColors, RelativeSource={RelativeSource TemplatedParent}}"
                                                                Style="{StaticResource ColorListStyle}" />
                                                    </Grid>
                                                </Grid>
                                            </Grid>
                                        </xctk:ColorPickerTabItem>
                                        <xctk:ColorPickerTabItem x:Name="AdvancedTabItem" Header="{Binding AdvancedButtonHeader, RelativeSource={RelativeSource TemplatedParent}}">
                                            <xctk:ColorPickerTabItem.Template>
                                                <ControlTemplate TargetType="{x:Type xctk:ColorPickerTabItem}">
                                                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                                        <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{DynamicResource ButtonBackgroundColorBrush}" Margin="0">
                                                            <Border x:Name="innerBorder" BorderBrush="#FFACACAC" BorderThickness="1,1,1,0" Background="{DynamicResource ButtonBackgroundColorBrush}" Margin="-1" Opacity="0"/>
                                                        </Border>
                                                        <ContentPresenter x:Name="contentPresenter"
                                                                          TextBlock.Foreground="{DynamicResource ButtonFrontColorBrush}"
                                                                          ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Panel.ZIndex" Value="1"/>
                                                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                                                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                                        </MultiDataTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </xctk:ColorPickerTabItem.Template>

                                            <!-- ColorCanvas -->
                                            <Grid x:Name="_colorCanvasHost">
                                                <xctk:ColorCanvas BorderThickness="0"
                                                                  Background="Transparent"
                                                                  Foreground="{DynamicResource ButtonFrontColorBrush}" FontWeight="Bold"
                                                                  SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}"
                                                                  UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}"
                                                                  Style="{DynamicResource ColorCanvasStyle1}">
                                                    <xctk:ColorCanvas.Width>
                                                        <Binding ConverterParameter="-18" Path="MaxDropDownWidth" RelativeSource="{RelativeSource TemplatedParent}">
                                                            <Binding.Converter>
                                                                <xctk:AdditionConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </xctk:ColorCanvas.Width>

                                                </xctk:ColorCanvas>
                                            </Grid>
                                        </xctk:ColorPickerTabItem>
                                    </TabControl>
                                </Border>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="DisplayColorAndName" Value="True">
                                <Setter Property="Visibility" TargetName="ColorOnly" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="ColorAndName" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="ShowTabHeaders" Value="False">
                                <Setter Property="Visibility" TargetName="StandardTabItem" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="AdvancedTabItem" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="ShowDropDownButton" Value="False">
                                <Setter Property="BorderThickness" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>


        <Style x:Key="ColorCanvasStyle1" TargetType="{x:Type xctk:ColorCanvas}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                        <GradientStop Color="#FFF0F0F0" Offset="0"/>
                        <GradientStop Color="#FFE5E5E5" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xctk:ColorCanvas}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="3">
                            <Grid Margin="2">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="200"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Border BorderBrush="DarkGray" BorderThickness="1" ClipToBounds="True">
                                        <Border.Background>
                                            <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                <DrawingBrush.Drawing>
                                                    <DrawingGroup>
                                                        <GeometryDrawing Brush="White">
                                                            <GeometryDrawing.Geometry>
                                                                <RectangleGeometry Rect="0,0,100,100"/>
                                                            </GeometryDrawing.Geometry>
                                                        </GeometryDrawing>
                                                        <GeometryDrawing Brush="LightGray">
                                                            <GeometryDrawing.Geometry>
                                                                <GeometryGroup>
                                                                    <RectangleGeometry Rect="0,0,50,50"/>
                                                                    <RectangleGeometry Rect="50,50,50,50"/>
                                                                </GeometryGroup>
                                                            </GeometryDrawing.Geometry>
                                                        </GeometryDrawing>
                                                    </DrawingGroup>
                                                </DrawingBrush.Drawing>
                                            </DrawingBrush>
                                        </Border.Background>
                                        <Canvas x:Name="PART_ColorShadingCanvas" HorizontalAlignment="Left" Height="100" VerticalAlignment="Top" Width="200">
                                            <Rectangle x:Name="ColorShadingRectangle" Height="{Binding Height, ElementName=PART_ColorShadingCanvas}" Width="{Binding Width, ElementName=PART_ColorShadingCanvas}">
                                                <Rectangle.Fill>
                                                    <Binding ElementName="PART_SpectrumSlider" Path="SelectedColor">
                                                        <Binding.Converter>
                                                            <xctk:ColorToSolidColorBrushConverter/>
                                                        </Binding.Converter>
                                                    </Binding>
                                                </Rectangle.Fill>
                                            </Rectangle>
                                            <Rectangle x:Name="WhiteGradient" Height="{Binding Height, ElementName=PART_ColorShadingCanvas}" Width="{Binding Width, ElementName=PART_ColorShadingCanvas}">
                                                <Rectangle.Fill>
                                                    <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                                        <GradientStop Color="White" Offset="0"/>
                                                        <GradientStop Color="Transparent" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Rectangle.Fill>
                                            </Rectangle>
                                            <Rectangle x:Name="BlackGradient" Height="{Binding Height, ElementName=PART_ColorShadingCanvas}" Width="{Binding Width, ElementName=PART_ColorShadingCanvas}">
                                                <Rectangle.Fill>
                                                    <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                                        <GradientStop Color="Black" Offset="0"/>
                                                        <GradientStop Color="#00000000" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Rectangle.Fill>
                                            </Rectangle>
                                            <Canvas x:Name="PART_ColorShadeSelector" Height="10" IsHitTestVisible="False" Width="10">
                                                <Ellipse Height="10" IsHitTestVisible="False" Stroke="White" StrokeThickness="3" Width="10"/>
                                                <Ellipse Height="10" IsHitTestVisible="False" Stroke="Black" StrokeThickness="1" Width="10"/>
                                            </Canvas>
                                        </Canvas>
                                    </Border>
                                    <Border Margin="0,5,0,0" Grid.Row="1">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Border x:Name="SelectedColorBorder" BorderBrush="#FFC9CACA" BorderThickness="1" Height="22" Margin="2,0">
                                                <Border.Background>
                                                    <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                        <DrawingBrush.Drawing>
                                                            <DrawingGroup>
                                                                <GeometryDrawing Brush="White">
                                                                    <GeometryDrawing.Geometry>
                                                                        <RectangleGeometry Rect="0,0,100,100"/>
                                                                    </GeometryDrawing.Geometry>
                                                                </GeometryDrawing>
                                                                <GeometryDrawing Brush="LightGray">
                                                                    <GeometryDrawing.Geometry>
                                                                        <GeometryGroup>
                                                                            <RectangleGeometry Rect="0,0,50,50"/>
                                                                            <RectangleGeometry Rect="50,50,50,50"/>
                                                                        </GeometryGroup>
                                                                    </GeometryDrawing.Geometry>
                                                                </GeometryDrawing>
                                                            </DrawingGroup>
                                                        </DrawingBrush.Drawing>
                                                    </DrawingBrush>
                                                </Border.Background>
                                                <Rectangle x:Name="SelectedColor">
                                                    <Rectangle.Fill>
                                                        <Binding Path="SelectedColor" RelativeSource="{RelativeSource TemplatedParent}">
                                                            <Binding.Converter>
                                                                <xctk:ColorToSolidColorBrushConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Rectangle.Fill>
                                                </Rectangle>
                                            </Border>
                                            <TextBox x:Name="PART_HexadecimalTextBox" Grid.Column="1" Margin="2,0" VerticalAlignment="Center">
                                                <TextBox.Style>
                                                    <Style TargetType="{x:Type TextBox}">
                                                        <Setter Property="Background" Value="Transparent"/>
                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonFrontColorBrush}"/>
                                                        <Style.BasedOn>
                                                            <Style TargetType="{x:Type TextBox}">
                                                                <Style.BasedOn>
                                                                    <Style TargetType="{x:Type TextBoxBase}">
                                                                        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                                                                        <Setter Property="BorderBrush" Value="#FFABADB3"/>
                                                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                                                        <Setter Property="BorderThickness" Value="1"/>
                                                                        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                                                                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                                                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                                        <Setter Property="AllowDrop" Value="True"/>
                                                                        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                                                        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                                        <Setter Property="Template">
                                                                            <Setter.Value>
                                                                                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                                                                                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                                                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                                                                    </Border>
                                                                                    <ControlTemplate.Triggers>
                                                                                        <Trigger Property="IsEnabled" Value="False">
                                                                                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                                                                        </Trigger>
                                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                                            <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                                                                                        </Trigger>
                                                                                        <Trigger Property="IsKeyboardFocused" Value="True">
                                                                                            <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                                                                                        </Trigger>
                                                                                    </ControlTemplate.Triggers>
                                                                                </ControlTemplate>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                        <Style.Triggers>
                                                                            <MultiTrigger>
                                                                                <MultiTrigger.Conditions>
                                                                                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                                                                                    <Condition Property="IsSelectionActive" Value="False"/>
                                                                                </MultiTrigger.Conditions>
                                                                                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                                                            </MultiTrigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </Style.BasedOn>
                                                            </Style>
                                                        </Style.BasedOn>
                                                        <Style.Triggers>
                                                            <Trigger Property="IsFocused" Value="False">
                                                                <Setter Property="BorderBrush" Value="Transparent"/>
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBox.Style>
                                            </TextBox>
                                        </Grid>
                                    </Border>
                                    <Border ClipToBounds="False" Grid.Column="1" Margin="4,-8,0,0" Grid.RowSpan="2">
                                        <xctk:ColorSpectrumSlider x:Name="PART_SpectrumSlider" VerticalAlignment="Stretch"/>
                                    </Border>
                                </Grid>
                                <Border x:Name="RGBBorder" BorderThickness="1" ClipToBounds="True" Margin="0,10,0,0" MinWidth="180" Grid.Row="1">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <TextBlock Grid.Column="0" Grid.Row="0" Text="R" VerticalAlignment="Center"/>
                                        <Slider x:Name="PART_RSlider" Grid.Column="1" LargeChange="10" Maximum="255" Margin="4,6" Grid.Row="0" SmallChange="1" TickFrequency="1" Value="{Binding R, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
                                        <TextBox Grid.Column="2" Grid.Row="0" Text="{Binding Value, ElementName=PART_RSlider}" VerticalAlignment="Center">
                                            <TextBox.Style>
                                                <Style TargetType="{x:Type TextBox}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="Foreground" Value="{DynamicResource ButtonFrontColorBrush}"/>
                                                    <Style.BasedOn>
                                                        <Style TargetType="{x:Type TextBox}">
                                                            <Style.BasedOn>
                                                                <Style TargetType="{x:Type TextBoxBase}">
                                                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" Value="#FFABADB3"/>
                                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                                                    <Setter Property="BorderThickness" Value="1"/>
                                                                    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                                                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                                    <Setter Property="AllowDrop" Value="True"/>
                                                                    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                                                    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="{x:Type TextBoxBase}">
                                                                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                                                    <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                                                                </Border>
                                                                                <ControlTemplate.Triggers>
                                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                                        <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsKeyboardFocused" Value="True">
                                                                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                                                                                    </Trigger>
                                                                                </ControlTemplate.Triggers>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Style.Triggers>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                                                                                <Condition Property="IsSelectionActive" Value="False"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                                                        </MultiTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Style.BasedOn>
                                                        </Style>
                                                    </Style.BasedOn>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsFocused" Value="False">
                                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBox.Style>
                                        </TextBox>
                                        <TextBlock Grid.Column="0" Grid.Row="1" Text="G" VerticalAlignment="Center"/>
                                        <Slider x:Name="PART_GSlider" Grid.Column="1" LargeChange="10" Maximum="255" Margin="4,6" Grid.Row="1" SmallChange="1" TickFrequency="1" Value="{Binding G, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
                                        <TextBox Grid.Column="2" Grid.Row="1" Text="{Binding Value, ElementName=PART_GSlider}" VerticalAlignment="Center">
                                            <TextBox.Style>
                                                <Style TargetType="{x:Type TextBox}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="Foreground" Value="{DynamicResource ButtonFrontColorBrush}"/>
                                                    <Style.BasedOn>
                                                        <Style TargetType="{x:Type TextBox}">
                                                            <Style.BasedOn>
                                                                <Style TargetType="{x:Type TextBoxBase}">
                                                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" Value="#FFABADB3"/>
                                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                                                    <Setter Property="BorderThickness" Value="1"/>
                                                                    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                                                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                                    <Setter Property="AllowDrop" Value="True"/>
                                                                    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                                                    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="{x:Type TextBoxBase}">
                                                                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                                                    <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                                                                </Border>
                                                                                <ControlTemplate.Triggers>
                                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                                        <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsKeyboardFocused" Value="True">
                                                                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                                                                                    </Trigger>
                                                                                </ControlTemplate.Triggers>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Style.Triggers>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                                                                                <Condition Property="IsSelectionActive" Value="False"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                                                        </MultiTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Style.BasedOn>
                                                        </Style>
                                                    </Style.BasedOn>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsFocused" Value="False">
                                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBox.Style>
                                        </TextBox>
                                        <TextBlock Grid.Column="0" Grid.Row="2" Text="B" VerticalAlignment="Center"/>
                                        <Slider x:Name="PART_BSlider" Grid.Column="1" LargeChange="10" Maximum="255" Margin="4,6" Grid.Row="2" SmallChange="1" TickFrequency="1" Value="{Binding B, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
                                        <TextBox Grid.Column="3" Grid.Row="2" Text="{Binding Value, ElementName=PART_BSlider}" VerticalAlignment="Center">
                                            <TextBox.Style>
                                                <Style TargetType="{x:Type TextBox}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="Foreground" Value="{DynamicResource ButtonFrontColorBrush}"/>
                                                    <Style.BasedOn>
                                                        <Style TargetType="{x:Type TextBox}">
                                                            <Style.BasedOn>
                                                                <Style TargetType="{x:Type TextBoxBase}">
                                                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" Value="#FFABADB3"/>
                                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                                                    <Setter Property="BorderThickness" Value="1"/>
                                                                    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                                                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                                    <Setter Property="AllowDrop" Value="True"/>
                                                                    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                                                    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="{x:Type TextBoxBase}">
                                                                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                                                    <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                                                                </Border>
                                                                                <ControlTemplate.Triggers>
                                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                                        <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsKeyboardFocused" Value="True">
                                                                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                                                                                    </Trigger>
                                                                                </ControlTemplate.Triggers>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Style.Triggers>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                                                                                <Condition Property="IsSelectionActive" Value="False"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                                                        </MultiTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Style.BasedOn>
                                                        </Style>
                                                    </Style.BasedOn>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsFocused" Value="False">
                                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBox.Style>
                                        </TextBox>
                                        <TextBlock Grid.Column="0" Grid.Row="3" Text="A" VerticalAlignment="Center">
                                            <TextBlock.Visibility>
                                                <Binding Path="UsingAlphaChannel" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </TextBlock.Visibility></TextBlock>
                                        <Slider x:Name="PART_OpacitySlider" Grid.Column="1" LargeChange="10" Maximum="255" Margin="4,6" Grid.Row="3" SmallChange="1" Value="{Binding A, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                            <Slider.Visibility>
                                                <Binding Path="UsingAlphaChannel" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </Slider.Visibility>
                                        </Slider>
                                        <TextBox Grid.Column="3" Grid.Row="3" Text="{Binding Value, ElementName=PART_OpacitySlider}" VerticalAlignment="Center">
                                            <TextBox.Style>
                                                <Style TargetType="{x:Type TextBox}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="Foreground" Value="{DynamicResource ButtonFrontColorBrush}"/>
                                                    <Style.BasedOn>
                                                        <Style TargetType="{x:Type TextBox}">
                                                            <Style.BasedOn>
                                                                <Style TargetType="{x:Type TextBoxBase}">
                                                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                                                                    <Setter Property="BorderBrush" Value="#FFABADB3"/>
                                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                                                    <Setter Property="BorderThickness" Value="1"/>
                                                                    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                                                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                                    <Setter Property="AllowDrop" Value="True"/>
                                                                    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                                                    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="{x:Type TextBoxBase}">
                                                                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                                                    <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                                                                </Border>
                                                                                <ControlTemplate.Triggers>
                                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                                        <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsKeyboardFocused" Value="True">
                                                                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                                                                                    </Trigger>
                                                                                </ControlTemplate.Triggers>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Style.Triggers>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                                                                                <Condition Property="IsSelectionActive" Value="False"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                                                        </MultiTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Style.BasedOn>
                                                        </Style>
                                                    </Style.BasedOn>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsFocused" Value="False">
                                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBox.Style>
                                            <TextBox.Visibility>
                                                <Binding Path="UsingAlphaChannel" RelativeSource="{RelativeSource TemplatedParent}">
                                                    <Binding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </TextBox.Visibility>
                                        </TextBox>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="SelectedColor" Value="{x:Null}">
                                <Setter Property="Visibility" TargetName="PART_ColorShadeSelector" Value="Collapsed"/>
                                <Setter Property="Background" TargetName="SelectedColorBorder" Value="Transparent"/>
                                <Setter Property="IsEnabled" TargetName="RGBBorder" Value="False"/>
                                <Setter Property="TextElement.Foreground" TargetName="RGBBorder" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <!--Color Picker Area-->

        <Style x:Key="DropDownButtonStyle" TargetType="{x:Type xctk:DropDownButton}">
            <Setter Property="FontSize"                Value="16" />
            <Setter Property="FontFamily"              Value="Arial Black" />
            <Setter Property="FontWeight"              Value="Bold" />
            <Setter Property="Background"              Value="{DynamicResource ButtonBackgroundColorBrush}" />
            <Setter Property="Foreground"              Value="{DynamicResource ButtonFrontColorBrush}" />
            <Setter Property="BorderBrush"             Value="{x:Null}" />
            <Setter Property="HorizontalAlignment"     Value="Center" />
            <Setter Property="VerticalAlignment"       Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xctk:DropDownButton}">
                        <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                            <ToggleButton  Grid.Column="1" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" x:Name="PART_DropDownButton">
                                <ToggleButton.IsHitTestVisible>
                                    <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <xctk:InverseBoolConverter />
                                        </Binding.Converter>
                                    </Binding>
                                </ToggleButton.IsHitTestVisible>
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <ContentPresenter Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                                    </ControlTemplate>
                                </ToggleButton.Template>
                                <Grid>
                                    <xctk:ButtonChrome Background="{DynamicResource ButtonBackgroundColorBrush}"
                                                       x:Name="ToggleButtonChrome" BorderBrush="{x:Null}">
                                        <!--RenderChecked="{TemplateBinding xctk:DropDownButton.IsOpen}"
                                                            RenderMouseOver="{Binding Path=IsMouseOver, ElementName=PART_DropDownButton}"
                                                            RenderPressed="{Binding Path=IsPressed, ElementName=PART_DropDownButton}"
                                                            RenderEnabled="{TemplateBinding UIElement.IsEnabled}"
                                                            CornerRadius="2.75" InnerCornerRadius="1.75"
                                                        -->
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                            <Grid Grid.Column="1" IsHitTestVisible="False" Margin="4,3" x:Name="arrowGlyph">
                                                <Path Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z" Fill="{DynamicResource ButtonFrontColorBrush}" Height="4" x:Name="Arrow" Width="7" />
                                            </Grid>
                                        </Grid>
                                    </xctk:ButtonChrome>
                                </Grid>
                            </ToggleButton>
                            <Popup AllowsTransparency="True" Focusable="False" HorizontalOffset="1" IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}" x:Name="PART_Popup" Placement="Bottom" StaysOpen="False" VerticalOffset="1">
                                <Border BorderThickness="1"
                                        Background="{DynamicResource MenuBackgroundColorBrush}"
                                        BorderBrush="{DynamicResource BorderColorBrush}"
                                        Padding="4">
                                    <ContentPresenter Content="{TemplateBinding DropDownContent}" x:Name="PART_ContentPresenter" />
                                </Border>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                            </Trigger>

                            <Trigger Property="IsMouseOver"        Value="True">
                                <Setter Property="Background"   TargetName="ToggleButtonChrome"  Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                                <Setter Property="BorderBrush"  TargetName="ToggleButtonChrome"    Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsOpen"          Value="True">
                                <Setter Property="Background"  TargetName="ToggleButtonChrome" Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                                <Setter Property="BorderBrush" TargetName="ToggleButtonChrome"     Value="{DynamicResource ButtonBorderCheckedColorBrush}" />
                                <Setter Property="BorderThickness" Value="1" />
                            </Trigger>
                            <Trigger Property="IsEnabled"       Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="ToggleButtonChrome" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Opacity"                TargetName="ToggleButtonChrome" Value="0.6" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--Font Family Area-->
        <DataTemplate x:Key="fontFamilyData">
            <TextBlock Text="{Binding Source}" FontFamily="{Binding Source}" FontSize="14" />
        </DataTemplate>

        <CollectionViewSource Source="{Binding Source={x:Static Fonts.SystemFontFamilies}}" x:Key="familyCollection">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="Source" Direction="Ascending" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>

        <DataTemplate DataType="{x:Type FamilyTypeface}">
            <WrapPanel>
                <TextBlock Text="{Binding Style}"   FontStyle="{Binding Style}" FontWeight="{Binding Weight}" FontStretch="{Binding Stretch}" FontFamily="{Binding SelectedItem, ElementName=lstFamily, FallbackValue=Arial}" />
                <TextBlock Text="-"                 FontStyle="{Binding Style}" FontWeight="{Binding Weight}" FontStretch="{Binding Stretch}" FontFamily="{Binding SelectedItem, ElementName=lstFamily, FallbackValue=Arial}" />
                <TextBlock Text="{Binding Weight}"  FontStyle="{Binding Style}" FontWeight="{Binding Weight}" FontStretch="{Binding Stretch}" FontFamily="{Binding SelectedItem, ElementName=lstFamily, FallbackValue=Arial}" />
                <TextBlock Text="-"                 FontStyle="{Binding Style}" FontWeight="{Binding Weight}" FontStretch="{Binding Stretch}" FontFamily="{Binding SelectedItem, ElementName=lstFamily, FallbackValue=Arial}" />
                <TextBlock Text="{Binding Stretch}" FontStyle="{Binding Style}" FontWeight="{Binding Weight}" FontStretch="{Binding Stretch}" FontFamily="{Binding SelectedItem, ElementName=lstFamily, FallbackValue=Arial}" />
            </WrapPanel>
        </DataTemplate>

        <!--Combox Style Area-->
        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Border
                  x:Name="Border"
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="{DynamicResource ButtonBackgroundColorBrush}"
                  BorderBrush="{DynamicResource ButtonBorderCheckedColorBrush}"
                  BorderThickness="1" />
                <Border
                  Grid.Column="0"
                  CornerRadius="0"
                  Margin="1"
                  Background="{DynamicResource BackgroundColorBrush}"
                  BorderBrush="{x:Null}"
                  BorderThickness="0,0,1,0" />
                <Path
                  x:Name="Arrow"
                  Grid.Column="1"
                  Fill="{DynamicResource ButtonFrontColorBrush}"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                    <Setter Property="Background"   TargetName="Border" Value="{DynamicResource ButtonBackgroundMouseOverColorBrush}" />
                    <Setter Property="BorderBrush"  TargetName="Border" Value="{DynamicResource ButtonBorderMouseOverColorBrush}" />
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="true">
                    <Setter Property="Background"  TargetName="Border" Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                    <Setter Property="BorderBrush" TargetName="Border"     Value="{DynamicResource ButtonBorderCheckedColorBrush}" />
                    <Setter Property="BorderThickness" Value="1" />
                </Trigger>
                <Trigger Property="IsPressed"          Value="True">
                    <Setter Property="Background"  TargetName="Border" Value="{DynamicResource ButtonBackgroundCheckedColorBrush}" />
                    <Setter Property="BorderBrush" TargetName="Border"     Value="{DynamicResource ButtonBorderCheckedColorBrush}" />
                    <Setter Property="BorderThickness" Value="1" />
                </Trigger>
                <Trigger Property="IsEnabled"       Value="false">
                    <Setter Property="TextElement.Foreground" TargetName="Border" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                    <Setter Property="Opacity"                TargetName="Border" Value="0.6" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
        </ControlTemplate>

        <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="MinWidth" Value="120" />
            <Setter Property="MinHeight" Value="20" />
            <Setter Property="Foreground" Value="{DynamicResource FontPickTextColorBrush}" />
            <Setter Property="Background" Value="{DynamicResource FontPickBackgroundColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderCheckedColorBrush}" />
            <Setter Property="Margin" Value="2,0,2,0" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <ToggleButton
                                        x:Name="ToggleButton"
                                        Template="{StaticResource ComboBoxToggleButton}"
                                        Grid.Column="2"
                                        Focusable="false"
                                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        ClickMode="Press"/>
                            <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                Margin="3,3,23,3"
                                                VerticalAlignment="Center"
                                                HorizontalAlignment="Left" />
                            <TextBox x:Name="PART_EditableTextBox"
                                        Style="{x:Null}"
                                        Template="{StaticResource ComboBoxTextBox}"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Margin="3,3,23,3"
                                        Focusable="True"
                                        Background="Transparent"
                                        Foreground="{DynamicResource FontPickTextColorBrush}"
                                        Visibility="Hidden"
                                        IsReadOnly="{TemplateBinding IsReadOnly}" />
                            <Popup
                                    x:Name="Popup"
                                    Placement="Bottom"
                                    IsOpen="{TemplateBinding IsDropDownOpen}"
                                    AllowsTransparency="True"
                                    Focusable="False"
                                    PopupAnimation="Slide">
                                <Grid x:Name="DropDown"
                                      SnapsToDevicePixels="True"
                                      MinWidth="{TemplateBinding ActualWidth}"
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border
                                            x:Name="DropDownBorder"
                                            Background="{DynamicResource BackgroundColorBrush}"

                                            BorderThickness="1"
                                            BorderBrush="{DynamicResource ButtonBorderCheckedColorBrush}" />
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                            </Trigger>
                            <Trigger Property="IsEnabled"       Value="false">
                                <Setter Property="Foreground"  Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Opacity"     Value="0.6" />
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                            </Trigger>
                            <Trigger Property="IsEditable"  Value="true">
                                <Setter Property="IsTabStop" Value="false" />
                                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                                <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- SimpleStyles: ComboBoxItem -->
        <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="Foreground"          Value="{DynamicResource FontPickTextColorBrush}" />
            <Setter Property="Background"          Value="{DynamicResource FontPickBackgroundColorBrush}" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border x:Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true"
                              BorderThickness="1">
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource FontPickMouseOverBackgroundColorBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource FontPickMouseOverBorderColorBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled"       Value="false">
                                <Setter Property="Foreground"  Value="{DynamicResource MenuItem2DisabledColorBrush}" />
                                <Setter Property="Opacity"     Value="0.6" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource FontPickSelectedBackgroundColorBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource FontPickSelectedBorderColorBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>